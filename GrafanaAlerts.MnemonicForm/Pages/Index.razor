@page "/"
@using GrafanaAlerts.MnemonicForm.Repositories
@using GrafanaAlerts.MnemonicForm.DTO
@using System.Text.Json
@using Newtonsoft.Json
@inject IMnemonicsRepository _mnemonicsRepository

<div class="container" style="height: 300px;">
    <div class=""><h1>Костыль</h1></div>
    <p>Тут вы сможете выбрать мнемоники без боли</p>
    @if (!string.IsNullOrEmpty(Ke)){<p>Выбранная КЕ: @Ke</p>}
    @if (!string.IsNullOrEmpty(InitiatorType)){<p>Тип заводящего: @InitiatorType</p>}
    @if (!string.IsNullOrEmpty(InitiatorRole)){<p>Роль заводящего: @InitiatorRole</p>}
    @if (!string.IsNullOrEmpty(ResponseRole)){<p>Роль ответственного: @ResponseRole</p>}
    @if (!string.IsNullOrEmpty(Priority)){<p>Приоритет: @Priority</p>}
</div>

<div class="container justify-content-center align-items-center d-flex" style="margin-top: 10%">
    <p style="padding-right: 5em; padding-top: 1em;">@Message</p>
    
    @if (Mnemonics.Count > 0 && Step == 1)
    {
        <select id="ke" class="selectpicker" data-live-search="true" style="background-color: #3C3C3C !important;">
            <option style="background-color: #3C3C3C !important;">Ничего не выбрано</option>
            @foreach (var option in Mnemonics)
            {
                <option data-tokens="@option" style="background-color: #3C3C3C !important;">@option</option>
            }
        </select>
    }
    @if (Mnemonics.Count > 0 && Step == 2)
                {
                    <select id="initTypes" class="selectpicker" data-live-search="true" style="background-color: #3C3C3C !important;">
                        <option style="background-color: #3C3C3C !important;">Ничего не выбрано</option>
                        @foreach (var option in Mnemonics)
                        {
                            <option data-tokens="@option" style="background-color: #3C3C3C !important;">@option</option>
                        }
                    </select>
                }
    @if (Mnemonics.Count > 0 && Step == 3)
        {
            <select id="initRoles" class="selectpicker" data-live-search="true" style="background-color: #3C3C3C !important;">
                <option style="background-color: #3C3C3C !important;">Ничего не выбрано</option>
                @foreach (var option in Mnemonics)
                {
                    <option data-tokens="@option" style="background-color: #3C3C3C !important;">@option</option>
                }
            </select>
        }
    @if (Mnemonics.Count > 0 && Step == 4)
            {
                <select id="responseRoles" class="selectpicker" data-live-search="true" style="background-color: #3C3C3C !important;">
                    <option style="background-color: #3C3C3C !important;">Ничего не выбрано</option>
                    @foreach (var option in Mnemonics)
                    {
                        <option data-tokens="@option" style="background-color: #3C3C3C !important;">@option</option>
                    }
                </select>
            }
    @if (Mnemonics.Count > 0 && Step == 5)
                {
                    <select id="priorities" class="selectpicker" data-live-search="true" style="background-color: #3C3C3C !important;">
                        <option style="background-color: #3C3C3C !important;">Ничего не выбрано</option>
                        @foreach (var option in Mnemonics)
                        {
                            <option data-tokens="@option" style="background-color: #3C3C3C !important;">@option</option>
                        }
                    </select>
                }
    @if (Step == 6 && TroubleInfo != null)
    {
        <input type="text" value="@JsonConvert.SerializeObject(TroubleInfo, Formatting.None)" readonly/>
    }
</div>


@code {
    // inject jsruntime to call javascript code
    [Inject] public IJSRuntime JSRuntime { get; set; }

    // hold the callback selected value
    public string SelectedValue { get; set; }
    
    public int Step { get; set; }

    public string Message { get; set; } = "Выберите КЕ из списка";

    public List<string> Mnemonics { get; set; } = new();
    public string Ke { get; set; }
    public string InitiatorType { get; set; }
    public string InitiatorRole { get; set; }
    public string ResponseRole { get; set; }
    public string Priority { get; set; }
    
    public List<AppDTO> Apps { get; set; }
    public List<RoleDTO> Roles { get; set; }

    public TroubleInfoDTO TroubleInfo;

    // call the javascript method to init the select picker
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // only needs to be called once per page render
        {
            Step = 1;
            Apps = _mnemonicsRepository.LoadKe();
            Mnemonics = (from app in Apps select app.Name).ToList();
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("InitSelectPicker", DotNetObjectReference.Create(this), "OnSelectedValue", "#ke");
            StateHasChanged();
        }
    }

    // method which will be triggered by javascript, need to pass the method name 
    [JSInvokable]
    public async void OnSelectedValue(string val)
    {
        SelectedValue = val;
        if (SelectedValue.Contains("Ничего")) return;
        switch (Step)
        {
            case 1:
                Ke = val;
                Mnemonics = _mnemonicsRepository.LoadInitiatorTypes();
                Step++;
                Message = "Выберите тип заводящего инцидент";
                await JSRuntime.InvokeVoidAsync("DestroySelectPicker", "#ke");
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("InitSelectPicker", DotNetObjectReference.Create(this), "OnSelectedValue", "#initTypes");
                StateHasChanged();
                break;
            case 2:
                InitiatorType = val;
                Roles = _mnemonicsRepository.LoadRoles();
                Mnemonics = (from role in Roles select role.Name).ToList();
                Step++;
                Message = "Выберите роль заводящего инцидент";
                await JSRuntime.InvokeVoidAsync("DestroySelectPicker", "#initTypes");
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("InitSelectPicker", DotNetObjectReference.Create(this), "OnSelectedValue", "#initRoles");
                StateHasChanged();
                break;
            case 3:
                InitiatorRole = val;
                Mnemonics = (from role in Roles select role.Name).ToList();
                Step++;
                Message = "Выберите роль ответственного";
                await JSRuntime.InvokeVoidAsync("DestroySelectPicker", "#initRoles");
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("InitSelectPicker", DotNetObjectReference.Create(this), "OnSelectedValue", "#responseRoles");
                StateHasChanged();
                break;
            case 4:
                ResponseRole = val;
                Mnemonics = _mnemonicsRepository.LoadPriorities();
                Step++;
                Message = "Выберите приоритет";
                await JSRuntime.InvokeVoidAsync("DestroySelectPicker", "#responseRoles");
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("InitSelectPicker", DotNetObjectReference.Create(this), "OnSelectedValue", "#priorities");
                StateHasChanged();
                break;
            case 5:
                Priority = val;
                Step++;
                Message = "Спасибо! Код алерта: ";
                TroubleInfo = new TroubleInfoDTO()
                {
                    Ke = (from app in Apps where app.Name == Ke select app.Mnemonics).First(),
                    InitiatorType = InitiatorType,
                    InitiatorRole = (from role in Roles where role.Name == InitiatorRole select role.Code).First(),
                    ResponseRole = (from role in Roles where role.Name == ResponseRole select role.Code).First(),
                    Priority = Priority
                };
                await JSRuntime.InvokeVoidAsync("DestroySelectPicker", "#priorities");
                StateHasChanged();
                break;
        }
        StateHasChanged();
    }
}